generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  name          String?
  createdAt     DateTime      @default(now()) @map("created_at")
  passwordHash  String?       @map("password_hash") @db.VarChar
  emailVerified Boolean?      @map("email_verified")
  role          String        @default("user") // "user" o "admin"
  isActive      Boolean?      @map("is_active")

  userPlans                   UserPlan[]  
  sessions                    Session[]
  loginHistory                LoginHistory[]
  reservations                Reservation[]
  purchases                   Purchase[]

  @@map("users")
}

model Session {
  id               String       @id @default(cuid())
  expiresAt        DateTime     @map("expires_at") @db.Timestamptz(6)
  userId           Int          @map("user_id")
  lastActivity     DateTime     @default(now()) @map("last_activity") @db.Timestamptz(6)

  user             User         @relation(fields: [userId], references: [id])

  @@map("sessions")
}


model EmailVerificationCode {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  email     String
  code      String   @unique
  expiresAt DateTime @map("expires_at")

  @@map("email_verification_codes")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  email     String
  token     String   @unique
  expiresAt DateTime @map("expires_at")

  @@map("password_reset_tokens")
}

model LoginHistory {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  sessionId  String   @map("session_id")
  loginAt    DateTime @default(now()) @map("login_at")
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @map("user_agent")
  clientId   String?  @map("client_id")

  user       User     @relation(fields: [userId], references: [id])

  @@map("login_history")
}

model News {
  id            Int       @id @default(autoincrement())
  title         String
  content       String
  imageUrl      String?   @map("image_url")
  publishedAt   DateTime  @default(now()) @map("published_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("news")
}

model Activity {
  id          Int       @id @default(autoincrement())
  name        String   
  description String?

  schedules   Schedule[]

  @@map("activities")
}

model Schedule {
  id          Int       @id @default(autoincrement())
  activityId  Int       @map("activity_id")
  dayOfWeek   Int       @map("day_of_week")    // 0 (sunday) a 6 (saturday)
  time        String                          // "08:00", "18:30", etc.
  coachId     Int?      @map("coach_id")
  maxCapacity Int       @map("max_capacity")
  locationId  Int       @map("location_id")

  reservations Reservation[]
  
  activity    Activity  @relation(fields: [activityId], references: [id])
  coach       Coach?     @relation(fields: [coachId], references: [id])
  location    Location  @relation(fields: [locationId], references: [id])

  @@map("schedules")
}

model Reservation {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  scheduleId  Int       @map("schedules_id")
  createdAt   DateTime  @default(now()) @map("created_at")

  schedule    Schedule  @relation(fields: [scheduleId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([userId, scheduleId])

  @@map("reservations")
}

model Purchase {
  id                  Int      @id @default(autoincrement())
  userId              Int      @map("user_id")
  planId              Int      @map("plan_id")
  amount              Int
  status              String
  mercadoPagoId       Int      @map("mercado_pago_id")
  createdAt           DateTime @default(now()) @map("created_at")
  
  plan       Plan     @relation(fields: [planId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("purchases")
}

model Plan {
  id                  Int      @id @default(autoincrement())
  name                String
  description         String?
  price               Int
  classLimit          Int      @map("class_limit")
  durationDays        Int      @map("duration_days") @default(30)

  purchases            Purchase[]
  userPlan             UserPlan[]

  @@map("plans")
}

model UserPlan {
  id               Int       @id @default(autoincrement())
  userId           Int       @map("user_id")
  planId           Int       @map("plan_id")
  startDate        DateTime  @map("start_date")
  expiresDate      DateTime  @map("expires_date")
  remainingClasses Int       @map("remaining_classes")

  user             User      @relation(fields: [userId], references: [id])
  plan             Plan      @relation(fields: [planId], references: [id])

  @@map("user_plans")
}

model Coach {
  id         Int        @id @default(autoincrement())
  name       String
  email      String?    @unique
  phone      String?
  isActive   Boolean    @default(true)  @map("is_active")
  createdAt  DateTime   @default(now()) @map("created_at")

  schedules  Schedule[]

  @@map("coaches")
}

model Location {
  id        Int        @id @default(autoincrement())
  name      String
  address   String?

  schedules Schedule[]
  
  @@map("locations")
}